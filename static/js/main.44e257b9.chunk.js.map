{"version":3,"sources":["test.js","App.js","serviceWorker.js","index.js"],"names":["SEL","SECTION_SEL","originalColors","TestApp","props","state","sectionsColor","fullpages","text","this","length","Menu","id","data-menuanchor","href","className","alt","anchors","menu","sectionSelector","render","comp","Wrapper","data-anchor","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oTAIMA,G,MAAM,kBACNC,EAAW,WAAOD,GAElBE,EAAiB,CAAC,UAAW,UAAW,UAAW,WAEpCC,E,YACnB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,cAAc,GAAD,OAAMJ,GACnBK,UAAW,CACT,CACEC,KAAM,aAER,CACEA,KAAM,aAER,CACEA,KAAM,eAZK,E,sEAsBjB,IAFoBC,KAAKJ,MAAlBE,UAEQG,OACb,OAAO,KAGT,IAAMC,EAAO,kBACX,wBAAIC,GAAG,QACL,wBAAIC,kBAAgB,aAAY,uBAAGC,KAAK,cAAR,WAChC,wBAAID,kBAAgB,cAAa,uBAAGC,KAAK,eAAR,WACjC,wBAAID,kBAAgB,aAAY,uBAAGC,KAAK,cAAR,aAIpC,OACE,yBAAKC,UAAU,OACb,uBAAGH,GAAG,OAAOE,KAAK,IAAIE,IAAI,wBAA1B,eACA,kBAAC,IAAD,CACEC,QAAS,CAAC,GAAI,YAAa,aAAc,aACzCC,KAAM,QACNC,gBAAiBlB,EACjBK,cAAeG,KAAKJ,MAAMC,cAE1Bc,OAAQ,SAAAC,GAAI,OACV,kBAAC,IAAcC,QAAf,KACE,kBAACX,EAAD,MACA,yBAAKI,UAAWf,GAAhB,aAGA,yBAAKe,UAAWf,GAAhB,UAGA,yBAAKe,UAAWf,GACd,yBAAKe,UAAU,QAAQQ,cAAY,IAAnC,UACA,yBAAKR,UAAU,QAAQQ,cAAY,UAAnC,WACA,yBAAKR,UAAU,QAAQQ,cAAY,UAAnC,YACA,yBAAKR,UAAU,QAAQQ,cAAY,UAAnC,aAEF,yBAAKR,UAAWf,GAAhB,mB,GA3DuBwB,IAAMC,WCM5BC,MAVf,WACE,OACE,yBAAKX,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,SCGYY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASZ,OAAO,kBAAC,EAAD,MAASa,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.44e257b9.chunk.js","sourcesContent":["import React from 'react';\nimport ReactFullpage from '@fullpage/react-fullpage';\nimport './test.css';\n\nconst SEL = 'custom-section';\nconst SECTION_SEL = `.${SEL}`;\n\nconst originalColors = ['#071e22', \"#ff9b54\", '#02c39a', '#1d7874'];\n\nexport default class TestApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sectionsColor: [...originalColors],\n      fullpages: [\n        {\n          text: 'Section 1',\n        },\n        {\n          text: 'Section 2',\n        },\n        {\n          text: 'Section 3',\n        }\n      ],\n    };\n  }\n\n\n  render() {\n    const {fullpages} = this.state;\n\n    if (!fullpages.length) {\n      return null;\n    }\n\n    const Menu = () => (\n      <ul id=\"menu\">\n        <li data-menuanchor=\"firstPage\"><a href=\"#firstPage\">Page 1</a></li>\n        <li data-menuanchor=\"secondPage\"><a href=\"#secondPage\">Page 2</a></li>\n        <li data-menuanchor=\"thirdPage\"><a href=\"#thirdPage\">Page 3</a></li>\n      </ul>\n    );\n\n    return (\n      <div className=\"App\">\n        <a id=\"logo\" href=\"/\" alt=\"iFsi DeCoDe homepage\">iFsi DeCoDe</a>\n        <ReactFullpage\n          anchors={['', 'firstPage', 'secondPage', 'thirdPage']}\n          menu={'#menu'}\n          sectionSelector={SECTION_SEL}\n          sectionsColor={this.state.sectionsColor}\n\n          render={comp => (\n            <ReactFullpage.Wrapper>\n              <Menu/>\n              <div className={SEL}>\n                Prototype\n              </div>\n              <div className={SEL}>\n                Page 1\n              </div>\n              <div className={SEL}>\n                <div className=\"slide\" data-anchor=\"\">Page 2</div>\n                <div className=\"slide\" data-anchor=\"slide1\">Slide 1</div>\n                <div className=\"slide\" data-anchor=\"slide2\"> Slide 2</div>\n                <div className=\"slide\" data-anchor=\"slide3\"> Slide 3</div>\n              </div>\n              <div className={SEL}>\n                Page 3\n              </div>\n            </ReactFullpage.Wrapper>\n          )}\n        />\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.css';\n// import ReactFullPage from '@fullpage/react-fullpage';\nimport TestApp from './test';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <TestApp/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}